{"version":3,"sources":["contexts/AppProviders.tsx","utils/promiseUtils.ts","app/App.tsx","serviceWorker.ts","index.tsx","utils/tokenUtils.ts","reducers/rootReducer.ts","app/store.tsx","reducers/miscDux.ts","constants/messages.ts","services/authService.ts","contexts/AuthContext.tsx","contexts/UserContext.tsx","services/apiService.ts","components/loading/Loading.tsx","contexts/ErrorContext.tsx"],"names":["AppProviders","children","retryPromise","promise","retriesLeft","interval","Promise","resolve","reject","then","catch","error","setTimeout","loadAuthenticatedApp","AuthenticatedApp","React","lazy","UnauthenticatedApp","App","user","useUser","useEffect","Suspense","fallback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","ReactDOM","render","StrictMode","store","persistor","utils","DateFnsUtils","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","ACCESS_TOKEN_KEY","getToken","localStorage","getItem","storeToken","setItem","data","Error","statusText","removeToken","removeItem","rootReducer","combineReducers","misc","persistConfig","key","storage","persistedReducer","persistReducer","customizedMiddleware","getDefaultMiddleware","serializableCheck","configureStore","reducer","middleware","persistStore","createSlice","name","initialState","reducers","setUser","action","payload","lastRetrieved","Date","now","clearUser","undefined","actions","GENERAL_ERROR","logout","TokenUtils","dispatch","signup","a","ApiService","post","login","getUser","AuthContext","createContext","AuthProvider","props","useState","firstAttemptFinished","setFirstAttemptFinished","useAsync","promiseFn","AuthService","isRejected","isPending","isSettled","useLayoutEffect","message","Provider","value","signupData","e","loginData","replace","useAuth","context","useContext","UserContext","UserProvider","axios","create","baseURL","transformResponse","defaults","humps","camelizeKeys","interceptors","request","use","token","tokenUtils","Authorization","Loading","rel","integrity","crossOrigin","className","ErrorContext","ErrorProvider","hasError","setHasError","newState","useError"],"mappings":"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","file":"static/js/main.0b18ad6b.chunk.js","sourcesContent":["import React from 'react';\n\nimport { AuthProvider } from './AuthContext';\nimport { ErrorProvider } from './ErrorContext';\nimport { UserProvider } from './UserContext';\n\nconst AppProviders: React.FunctionComponent = ({ children }) => {\n  return (\n    <AuthProvider>\n      <UserProvider>\n        <ErrorProvider>{children}</ErrorProvider>\n      </UserProvider>\n    </AuthProvider>\n  );\n};\n\nexport default AppProviders;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n// https://dev.to/goenning/how-to-retry-when-react-lazy-fails-mb5\nexport const retryPromise = (\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  promise: any,\n  retriesLeft = 5,\n  interval = 1000,\n): Promise<unknown> => {\n  return new Promise((resolve, reject) => {\n    promise()\n      .then(resolve)\n      .catch((error: Error) => {\n        setTimeout(() => {\n          if (retriesLeft === 1) {\n            reject(error);\n            return;\n          }\n\n          retryPromise(promise, retriesLeft - 1, interval).then(\n            resolve,\n            reject,\n          );\n        }, interval);\n      });\n  });\n};\n","import React from 'react';\n\nimport Loading from 'components/loading';\nimport { useUser } from 'contexts/UserContext';\nimport { retryPromise } from 'utils/promiseUtils';\n\nimport '../index.css';\n\n// Code splitting with React.lazy and Suspense\ntype ModuleType = typeof import('app/AuthenticatedApp');\n\nconst loadAuthenticatedApp = (): Promise<ModuleType> => import('app/AuthenticatedApp');\nconst AuthenticatedApp = React.lazy(\n  () => retryPromise(loadAuthenticatedApp) as Promise<ModuleType>,\n);\nconst UnauthenticatedApp = React.lazy(() => import('app/UnauthenticatedApp'));\n\nconst App: React.FunctionComponent = () => {\n  // user will be undefined when not logged in or when jwt expires\n  const { user } = useUser();\n\n  React.useEffect(() => {\n    loadAuthenticatedApp();\n  }, []);\n\n  return (\n    <React.Suspense fallback={<Loading />}>\n      {/* Renders the appropriate app */}\n      {user ? <AuthenticatedApp /> : <UnauthenticatedApp />}\n    </React.Suspense>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport store, { persistor } from 'app/store';\nimport AppProviders from 'contexts/AppProviders';\n\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <AppProviders>\n    <React.StrictMode>\n      <Provider store={store}>\n        <PersistGate persistor={persistor}>\n          <HashRouter>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <App />\n            </MuiPickersUtilsProvider>\n          </HashRouter>\n        </PersistGate>\n      </Provider>\n    </React.StrictMode>\n  </AppProviders>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import { AxiosResponse } from 'axios';\n\nimport LoginData from 'interfaces/models/auth';\n\nexport const ACCESS_TOKEN_KEY = 'accessToken';\n\nconst getAccessToken = (): string | null => {\n  return localStorage.getItem(ACCESS_TOKEN_KEY);\n};\n\nconst storeToken = (response: AxiosResponse<LoginData>): Promise<null> => {\n  if (response.status === 200 || response.status === 201) {\n    localStorage.setItem(ACCESS_TOKEN_KEY, response.data[ACCESS_TOKEN_KEY]);\n    return Promise.resolve(null);\n  }\n  return Promise.reject(new Error(response.statusText));\n};\n\nconst removeToken = (): void => {\n  localStorage.removeItem(ACCESS_TOKEN_KEY);\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { getToken: getAccessToken, storeToken, removeToken };\n","import { combineReducers } from 'redux';\n\nimport misc, { MiscDux } from 'reducers/miscDux';\n\nexport interface RootState {\n  misc: MiscDux;\n}\n\nconst rootReducer = combineReducers({ misc });\n\nexport default rootReducer;\n","/* eslint-disable @typescript-eslint/no-var-requires */\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport rootReducer from 'reducers/rootReducer';\n\nconst persistConfig = {\n  key: 'openjio-frontend',\n  storage,\n};\n\n// To support the persisting of redux across sessions\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// Creation of custom middleware, needed for redux persist\nconst customizedMiddleware = getDefaultMiddleware({\n  serializableCheck: false,\n});\n\n// Creation of redux store\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: customizedMiddleware,\n});\n\nexport const persistor = persistStore(store);\n\n// Settings to aid development\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('reducers/rootReducer', () => {\n    // eslint-disable-next-line global-require\n    const newRootReducer = require('reducers/rootReducer').default;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport default store;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { PersonData } from 'interfaces/models/persons';\n\nexport interface MiscDux {\n  user?: PersonData;\n  lastRetrieved?: number;\n}\n\nconst initialState: MiscDux = {};\n\n// Contains user information, theme, view selected and fun fact of the day\nconst misc = createSlice({\n  name: 'misc',\n  initialState,\n  reducers: {\n    setUser: (state, action: PayloadAction<PersonData>): void => {\n      state.user = { ...action.payload };\n      state.lastRetrieved = Date.now();\n    },\n    clearUser: (state): void => {\n      state.user = undefined;\n      state.lastRetrieved = undefined;\n    },\n  },\n});\n\nexport const { setUser, clearUser } = misc.actions;\n\nexport default misc.reducer;\n","export const GENERAL_ERROR = 'Something went wrong. Please try again!';\n","import store from 'app/store';\nimport { GENERAL_ERROR } from 'constants/messages';\nimport { PersonData } from 'interfaces/models/persons';\nimport { UserLoginData, UserPostData } from 'interfaces/models/users';\nimport { clearUser, setUser } from 'reducers/miscDux';\nimport ApiService from 'services/apiService';\nimport TokenUtils from 'utils/tokenUtils';\n\nconst logout = (): Promise<void> => {\n  TokenUtils.removeToken();\n  store.dispatch(clearUser());\n  return Promise.resolve();\n};\n\nconst signup = async (data: UserPostData): Promise<null> => {\n  const response = await ApiService.post('users', data).catch((error) => {\n    return Promise.reject(\n      new Error(error.response?.data?.error ?? GENERAL_ERROR),\n    );\n  });\n  return TokenUtils.storeToken(response);\n};\n\nconst login = async (data: UserLoginData): Promise<null> => {\n  const response = await ApiService.post('auth/login', data).catch((error) => {\n    return Promise.reject(\n      new Error(error.response?.data?.error ?? GENERAL_ERROR),\n    );\n  });\n  return TokenUtils.storeToken(response);\n};\n\nconst getUser = async (): Promise<PersonData | null> => {\n  const token = TokenUtils.getToken();\n  if (!token) {\n    return Promise.resolve(null);\n  }\n\n  try {\n    const response = await ApiService.get('users/self');\n    if (response.status === 200) {\n      const { user } = response.data;\n      store.dispatch(setUser(user));\n      return user;\n    }\n    throw new Error(response.statusText);\n  } catch (error) {\n    logout();\n    return Promise.reject(new Error(error));\n  }\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  signup,\n  login,\n  logout,\n  getUser,\n};\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React from 'react';\nimport { useAsync } from 'react-async';\n\nimport Loading from 'components/loading';\nimport AuthContextInterface from 'interfaces/contexts/authContext';\nimport { UserLoginData, UserPostData } from 'interfaces/models/users';\nimport AuthService from 'services/authService';\n\nconst AuthContext = React.createContext<AuthContextInterface | undefined>(undefined);\n\nconst AuthProvider: React.FunctionComponent = (props) => {\n  const [firstAttemptFinished, setFirstAttemptFinished] = React.useState(false);\n  const {\n    data = null,\n    error,\n    isRejected,\n    isPending,\n    isSettled,\n    reload,\n  } = useAsync({\n    promiseFn: AuthService.getUser,\n  });\n\n  // Uses useLayoutEffect as auth status directly affects the view\n  React.useLayoutEffect(() => {\n    if (isSettled) {\n      setFirstAttemptFinished(true);\n    }\n  }, [isSettled]);\n\n  if (!firstAttemptFinished) {\n    if (isPending) {\n      return <Loading />;\n    }\n    if (isRejected && error) {\n      return (\n        <div>\n          <p>There&apos;s a problem. Try refreshing the app.</p>\n          <pre>{error.message}</pre>\n        </div>\n      );\n    }\n  }\n\n  const signup = (signupData: UserPostData): Promise<void> => AuthService.signup(signupData)\n    .then(reload)\n    .catch((e: Error) => {\n      return Promise.reject(new Error(e.message));\n    });\n\n  const login = (loginData: UserLoginData): Promise<void> => AuthService.login(loginData)\n    .then(reload)\n    .catch((e: Error) => {\n      return Promise.reject(new Error(e.message));\n    });\n\n  const logout = (): Promise<void> => AuthService.logout()\n    .then(reload)\n    .then(() => window.location.replace(window.location.href));\n\n  return (\n    <AuthContext.Provider\n      value={{\n        data, signup, login, logout,\n      }}\n      {...props}\n    />\n  );\n};\n\nconst useAuth = (): AuthContextInterface => {\n  const context = React.useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within a AuthProvider');\n  }\n  return context;\n};\n\nexport { AuthProvider, useAuth };\n","import React from 'react';\n\nimport UserContextInterface from 'interfaces/contexts/userContext';\n\nimport { useAuth } from './AuthContext';\n\nconst UserContext = React.createContext<UserContextInterface | undefined>(undefined);\n\n// Allows user data to be accessible from everywhere\nconst UserProvider: React.FunctionComponent = (props) => {\n  const { data } = useAuth();\n\n  return <UserContext.Provider value={{ user: data }} {...props} />;\n};\n\nconst useUser = (): UserContextInterface => {\n  const context = React.useContext(UserContext);\n  if (context === undefined) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n};\n\nexport { UserProvider, useUser };\n","import axios, { AxiosTransformer } from 'axios';\nimport humps from 'humps';\n\nimport tokenUtils from 'utils/tokenUtils';\n\nconst ApiService = axios.create({\n  baseURL: `${process.env.REACT_APP_BACKEND_API}/${process.env.REACT_APP_BACKEND_VERSION}`,\n  headers: { 'Content-Type': 'application/json' },\n  transformResponse: [\n    ...(axios.defaults.transformResponse as AxiosTransformer[]),\n    (data) => humps.camelizeKeys(data), // takes care of case issues\n  ],\n  // transformRequest: [\n  //   (data) => humps.decamelizeKeys(data), // takes care of case issues\n  //   ...axios.defaults.transformRequest,\n  // ],\n});\n\nApiService.interceptors.request.use(\n  (config) => {\n    const token = tokenUtils.getToken();\n    // eslint-disable-next-line no-param-reassign\n    if (token) config.headers.Authorization = `Bearer ${token}`;\n    return config;\n  },\n  (error) => {\n    return Promise.reject(new Error(error));\n  },\n);\n\nexport default ApiService;\n","import React from 'react';\n\nconst Loading: React.FunctionComponent = () => {\n  return (\n    <div>\n      <link\n        rel=\"stylesheet\"\n        href=\"https://pagecdn.io/lib/font-awesome/5.10.0-11/css/all.min.css\"\n        integrity=\"sha256-p9TTWD+813MlLaxMXMbTA7wN/ArzGyW/L7c5+KkjOkM=\"\n        crossOrigin=\"anonymous\"\n      />\n      <div className=\"w-full h-full fixed block top-0 left-0 bg-white opacity-75 z-50\">\n        <span className=\"text-orange-600 opacity-75 align-center align-middle top-1/2 text-center my-0 mx-auto block relative w-0 h-0\">\n          <i className=\"fas fa-circle-notch fa-spin fa-5x\" />\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React, { useState } from 'react';\n\nimport ErrorContextInterface from 'interfaces/contexts/errorContext';\n\nconst ErrorContext = React.createContext<ErrorContextInterface | undefined>(undefined);\n\nconst ErrorProvider: React.FunctionComponent = (props) => {\n  const [hasError, setHasError] = useState<boolean>(false);\n  return (\n    <ErrorContext.Provider\n      value={{\n        hasError,\n        setHasError: (newState: boolean) => setHasError(newState),\n      }}\n      {...props}\n    />\n  );\n};\n\nconst useError = (): ErrorContextInterface => {\n  const context = React.useContext(ErrorContext);\n  if (context === undefined) {\n    throw new Error('useError must be used within a ErrorProvider');\n  }\n  return context;\n};\n\nexport { ErrorProvider, useError };\n"],"sourceRoot":""}